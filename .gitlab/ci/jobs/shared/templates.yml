# Basic, specialised, minimal, orthogonal templates

# Some settings we want by default on all jobs that cannot be set
# through the key `default` in `.gitlab-ci.yml`.
.default_settings_template:
  # `dependencies` are empty be default. Each individual job or
  # template requiring artifacts from preceeding jobs should declare
  # their dependencies locally.
  dependencies: []
  tags: ["gcp"]

# Default runner tags for jobs in the build stage
.tags_template__build:
  tags: ["gcp"]

# Default runner tags for arm64 jobs in the build stage
.tags_template__build_arm64:
  tags: ["gcp_arm64"]

# Block the propagation of the GCP tag for standard jobs
.tags_template__no_gcp:
  tags: []

# Block the propagation of the GCP tag for arm64 jobs
.tags_template__no_gcp_arm64:
  tags: ["arm64"]

# Run on after job 'trigger'. Run immediately if there is no 'trigger' job (i.e. non-before_merging pipelines).
.needs__trigger:
  needs:
    - job: trigger
      optional: true

# Need and depend on the 'oc.docker:rust-toolchain'
#
# Should be used by all jobs that use the image
# '.image_template__rust_toolchain': either directly in its 'image:'
# field or as a dependency in e.g. Docker builds.
#
# The 'dependencies:' of this template is also necessary, since
# 'oc.docker:rust-toolchain' produces a dotenv-report containing the
# exact tag of the rust-toolchain image that should be used.
.needs__rust_toolchain:
  needs: [oc.docker:rust-toolchain]
  dependencies: [oc.docker:rust-toolchain]

# Only if octez source code has changed
.rules__octez_changes:
  rules:
    - changes:
        - src/**/*
        - etherlink/**/*
        - tezt/**/*
        - .gitlab/**/*
        - .gitlab-ci.yml
        - michelson_test_scripts/**/*
        - tzt_reference_test_suite/**/*
      when: on_success

# Add as a manual job if octez source code has changed
.rules__octez_changes_manual:
  rules:
    - changes:
        - src/**/*
        - etherlink/**/*
        - tezt/**/*
        - .gitlab/**/*
        - .gitlab-ci.yml
        - michelson_test_scripts/**/*
        - tzt_reference_test_suite/**/*
      when: manual
      allow_failure: true

# Only if octez source code has changed, if the images has changed or
# if kernels.mk changed.
.rules__octez_changes_or_kernels:
  rules:
    - changes:
        - images/**/*
        - scripts/ci/**/*
        - kernels.mk
        - etherlink.mk
        - src/**/*
        - etherlink/**/*
        - tezt/**/*
        - .gitlab/**/*
        - .gitlab-ci.yml
        - michelson_test_scripts/**/*
        - tzt_reference_test_suite/**/*
      when: on_success

# Only if octez source code has changed and Marge Bot is not the
# trigger
.rules__octez_changes_and_not_margebot:
  rules:
    - if: '$GITLAB_USER_LOGIN == "nomadic-margebot"'
      when: never
    - changes:
        - src/**/*
        - etherlink/**/*
        - tezt/**/*
        - .gitlab/**/*
        - .gitlab-ci.yml
        - michelson_test_scripts/**/*
        - tzt_reference_test_suite/**/*
      when: on_success

# Only if documentation has changed
# NB: maintain in sync with .rules__octez_docs_changes_manual!
.rules__octez_docs_changes:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $TZ_SCHEDULE_KIND == "EXTENDED_TESTS"'
      when: always
    # Run when there is label on the merge request
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|,)ci--docs(?:$|,)/'
      when: on_success
    - changes:
        - scripts/**/*/
        - script-inputs/**/*/
        - src/**/*
        - tezt/**/*
        - vendors/**/*
        - dune
        - dune-project
        - dune-workspace
        - docs/**/*
        - .gitlab/**/*
        - .gitlab-ci.yml
      when: on_success

# Manual if documentation has changed
# NB: maintain in sync with .rules__octez_docs_changes!
.rules__octez_docs_changes_manual:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $TZ_SCHEDULE_KIND == "EXTENDED_TESTS"'
      when: always
    # Run when there is label on the merge request
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|,)ci--docs(?:$|,)/'
      when: on_success
    - changes:
        - scripts/**/*/
        - script-inputs/**/*/
        - src/**/*
        - tezt/**/*
        - vendors/**/*
        - dune
        - dune-project
        - dune-workspace
        - docs/**/*
        - .gitlab/**/*
        - .gitlab-ci.yml
      when: manual

# Add variable for bisect_ppx instrumentation.
#
# This template should be extended by jobs that build OCaml targets
# that should be instrumented for coverage output. This set of job
# includes build jobs (like [oc.build_x86_64_*]). It also includes
# OCaml unit test jobs like [oc.unit:*-x86_64] as they build the test
# runners before their execution.
.oc.template__coverage_instrumentation:
  variables:
    COVERAGE_OPTIONS: "--instrument-with bisect_ppx"

# Add variable specifying trace storage.
#
# This template should be extended by jobs that either produce (like
# test jobs) or consume (like the [unified_coverage] job) coverage
# traces. In addition to specifying the location of traces, setting
# this variable also _enables_ coverage trace output for instrumented
# binaries.
.oc.template__coverage_location:
  variables:
    BISECT_FILE: "$CI_PROJECT_DIR/_coverage_output/"

# Add variables for bisect_ppx output and store the traces as an
# artifact.
#
# This template should be extended by test jobs that produce coverage.
.oc.template__coverage_output_artifact:
  extends:
    - .oc.template__coverage_location
  artifacts:
    name: "coverage-files-$CI_JOB_ID"
    paths:
      - $BISECT_FILE
    expire_in: 1 day
    when: on_success

# Enables retries for flaky test jobs.
.oc.template__retry_flaky:
  retry: 2

.oc.kernels_template:
  extends:
    - .default_settings_template
    - .image_template__rust_toolchain
    - .needs__rust_toolchain
    - .rules__octez_changes_or_kernels
  variables:
    CC: clang
    CARGO_HOME: $CI_PROJECT_DIR/cargo
    NATIVE_TARGET: x86_64-unknown-linux-musl

.docker_auth_template:
  extends:
    - .default_settings_template
  variables:
    # Version of the docker to use, docker daemon ad client must
    # be in the same version.git
    DOCKER_VERSION: "24.0.6"
  before_script:
    - ./scripts/ci/docker_initialize.sh
  services:
    - docker:${DOCKER_VERSION}-dind

.test_etherlink_kernel:
  extends:
    - .oc.kernels_template
  stage: test
  script:
    - make -f etherlink.mk check
    - make -f etherlink.mk test
  cache:
    key: kernels
    paths:
      - cargo/

.test_risc_v_kernels:
  extends:
    - .oc.kernels_template
  stage: test
  script:
    - make -C src/risc_v check
    - make -C src/risc_v test
    - make -C src/risc_v audit
  cache:
    key: kernels
    paths:
      - cargo/
