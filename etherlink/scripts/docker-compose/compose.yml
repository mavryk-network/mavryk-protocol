---
version: '3.8'
services:

  _mavryk_with_curl_build:
    container_name: mavryk_with_curl_build
    image: mavryk_with_curl:${MAVKIT_TAG}
    command: ['echo', 'build completed']  # any linux command which directly terminates.
    build:
      context: $PWD/mavryk_with_curl
      dockerfile: $PWD/mavryk_with_curl/Dockerfile
      args:
        MAVKIT_TAG: ${MAVKIT_TAG}

  mavkit-node:
    container_name: mavkit-node
    depends_on:
      - _mavryk_with_curl_build
    image: mavryk_with_curl:${MAVKIT_TAG}
    healthcheck:
      test: curl http://0.0.0.0:8732/monitor/bootstrapped
    volumes:
      - ${HOST_MAVRYK_DATA_DIR}:/home/tezos
    networks:
      - etherlink-net
    ports:
      - 8732:8732
    entrypoint: /usr/local/bin/mavkit-node
    command: run --rpc-addr=0.0.0.0:8732 --allow-all-rpc 0.0.0.0

  smart-rollup-node:
    container_name: rollup-node
    image: mavryk_with_curl:${MAVKIT_TAG}
    depends_on:
      _mavryk_with_curl_build:
        condition: service_completed_successfully
      mavkit-node:
        condition: service_healthy
    restart: always
    volumes:
      - ${HOST_MAVRYK_DATA_DIR}:/home/tezos
    ports:
      - 8733:8733
    networks:
      - etherlink-net
    healthcheck:
      test: curl http://0.0.0.0:8733/global/smart_rollup_address
    entrypoint: /usr/local/bin/mavkit-smart-rollup-node
    command: --endpoint http://mavkit-node:8732 run

  sequencer:
    container_name: evm-sequencer
    image: mavryk/mavryk-bare:${MAVKIT_TAG}
    depends_on:
      smart-rollup-node:
        condition: service_healthy
    restart: always
    volumes:
      - ${HOST_MAVRYK_DATA_DIR}:/home/tezos
    networks:
      - etherlink-net
    ports:
      - 8545:8545
    entrypoint: /usr/local/bin/mavkit-evm-node
    command: run sequencer with endpoint http://rollup-node:8733 signing with ${SEQUENCER_ALIAS} --rpc-addr 0.0.0.0 --rpc-port 8545 --initial-kernel /home/tezos/kernel/evm_installer.wasm --preimages-dir /home/tezos/kernel/_evm_installer_preimages --time-between-blocks 10 --cors-origins '*' --cors-headers '*' --devmode

  blockscout-redis-db:
    image: 'redis:alpine'
    container_name: blockscout-redis-db
    profiles: [frontend]
    expose:
      - 6379
    command: redis-server
    networks:
      - blockscout-net

  blockscout-db:
    image: postgres:14
    container_name: blockscout-db
    profiles: [frontend]
    restart: always
    command: postgres -c 'max_connections=200'
    environment:
        POSTGRES_PASSWORD: ''
        POSTGRES_USER: 'postgres'
        POSTGRES_HOST_AUTH_METHOD: 'trust'
    ports:
      - 7432:5432
    networks:
      - blockscout-net

  blockscout:
    depends_on:
      - blockscout-db
      - blockscout-redis-db
    image: blockscout/blockscout:${DOCKER_TAG:-latest}
    container_name: blockscout
    profiles: [frontend]
    restart: always
    stop_grace_period: 5m
    links:
      - blockscout-db:database
    command: sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    env_file:
      -  ./blockscout.env
    environment:
      SUBNETWORK: Etherlink
      CHAIN_ID: ${EVM_CHAIN_ID}
      INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: true
      INDEXER_DISABLE_INTERNAL_TRANSACTIONS_FETCHER: true
      MICROSERVICE_SC_VERIFIER_ENABLED: false
      MICROSERVICE_VISUALIZE_SOL2UML_ENABLED: false
      MICROSERVICE_SIG_PROVIDER_ENABLED: false
      DATABASE_URL: postgresql://postgres:@host.docker.internal:7432/blockscout?ssl=false
      ACCOUNT_REDIS_URL: redis://blockscout-redis-db:6379
    ports:
      - 4000:4000
    networks:
      - etherlink-net
      - blockscout-net

networks:
  etherlink-net:
  blockscout-net: